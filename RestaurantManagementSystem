import java.awt.*;  
import javax.swing.*;  
import java.awt.event.*;  

class RestaurantManagementSystem extends JFrame implements ActionListener {
    // Declare components for the menu interface
    private JLabel title;
    private JButton orderButton, viewMenuButton, exitButton;

    // Updated menu items with detailed pricing for each sub-item, grouped by category
    private String[] items = {
        "Chicken Biriyani - ₹150", 
        "Mutton Biriyani - ₹220", 
        "Paneer Tikka Makhni - ₹185", 
        "Veg Fried Rice - ₹95", 
        "Cheese Burger - ₹110", 
        "Fruit Salad - ₹65", 
        "Nuggets (4 pc) - ₹40", 
        "Veg Sandwich - ₹50", 
        "French Fries - ₹60", 
        "Tea - ₹25", 
        "Coffee - ₹25", 
        "Pepsi - ₹45", 
        "Strawberry Milkshake - ₹55"
    };

    private int[] prices = {
        150, 220, 185, 95, 110, // Biriyani, Paneer, Veg Fried Rice, Cheese Burger prices
        65, 40, 50, 60,         // Fruit Salad, Nuggets, Sandwich, Fries prices
        25, 25, 45, 55          // Tea, Coffee, Orange Juice, Milkshake prices
    };

    public RestaurantManagementSystem() {
        // Create the title label
        title = new JLabel("Welcome to DELIGHT Restaurant", JLabel.CENTER);
        title.setFont(new Font("Serif", Font.BOLD, 36));
        title.setForeground(Color.WHITE);

        // Create buttons with styles
        orderButton = new JButton("Place an Order");
        orderButton.setFont(new Font("Arial", Font.PLAIN, 24));
        orderButton.setBackground(Color.BLUE);
        orderButton.setForeground(Color.WHITE);

        viewMenuButton = new JButton("View Menu");
        viewMenuButton.setFont(new Font("Arial", Font.PLAIN, 24));
        viewMenuButton.setBackground(new Color(128, 0, 128));
        viewMenuButton.setForeground(Color.WHITE);

        exitButton = new JButton("Exit");
        exitButton.setFont(new Font("Arial", Font.PLAIN, 24));
        exitButton.setBackground(Color.RED);
        exitButton.setForeground(Color.WHITE);

        // Add action listeners for the buttons
        orderButton.addActionListener(this);
        viewMenuButton.addActionListener(this);
        exitButton.addActionListener(this);

        // Set the layout for the frame and add components
        setLayout(new FlowLayout());
        setBackground(Color.DARK_GRAY);
        add(title);
        add(orderButton);
        add(viewMenuButton);
        add(exitButton);

        // Frame settings
        setTitle("Restaurant Management System");
        setSize(600, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        getContentPane().setBackground(Color.DARK_GRAY);
        setVisible(true);
    }
    
    // Event handling for button clicks
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == orderButton) {
            placeOrder();
        } else if (e.getSource() == viewMenuButton) {
            displayMenu();
        } else if (e.getSource() == exitButton) {
            System.exit(0);
        }
    }

    // Method to display the restaurant menu
    public void displayMenu() {
        JPanel menuPanel = new JPanel();
        menuPanel.setLayout(new GridLayout(items.length + 3, 1));
        menuPanel.setBackground(Color.WHITE);

        JLabel mainDishSection = new JLabel("MAIN COURSE", JLabel.CENTER);
        mainDishSection.setFont(new Font("Arial", Font.BOLD, 26));
        mainDishSection.setForeground(Color.RED);
        menuPanel.add(mainDishSection);

        for (int i = 0; i < 5; i++) {
            JLabel itemLabel = new JLabel(items[i], JLabel.CENTER);
            itemLabel.setFont(new Font("Arial", Font.PLAIN, 22));
            itemLabel.setForeground(Color.RED);
            menuPanel.add(itemLabel);
        }

        JLabel snacksSection = new JLabel("APPETIZERS", JLabel.CENTER);
        snacksSection.setFont(new Font("Arial", Font.BOLD, 26));
        snacksSection.setForeground(new Color(128, 0, 128));
        menuPanel.add(snacksSection);

        for (int i = 5; i < 9; i++) {
            JLabel itemLabel = new JLabel(items[i], JLabel.CENTER);
            itemLabel.setFont(new Font("Arial", Font.PLAIN, 22));
            itemLabel.setForeground(new Color(128, 0, 128));
            menuPanel.add(itemLabel);
        }

        JLabel drinksSection = new JLabel("BEVERAGES", JLabel.CENTER);
        drinksSection.setFont(new Font("Arial", Font.BOLD, 26));
        drinksSection.setForeground(Color.BLUE);
        menuPanel.add(drinksSection);

        for (int i = 9; i < items.length; i++) {
            JLabel itemLabel = new JLabel(items[i], JLabel.CENTER);
            itemLabel.setFont(new Font("Arial", Font.PLAIN, 22));
            itemLabel.setForeground(Color.BLUE);
            menuPanel.add(itemLabel);
        }

        JScrollPane scrollPane = new JScrollPane(menuPanel);
        scrollPane.setBackground(Color.LIGHT_GRAY);
        JOptionPane.showMessageDialog(this, scrollPane, "Restaurant Menu", JOptionPane.PLAIN_MESSAGE);
    }

    // Method to handle placing an order with quantity input
    public void placeOrder() {
        int total = 0;
        StringBuilder orderSummary = new StringBuilder("Your Order:\n");

        // Create checkboxes and quantity fields for each item
        JCheckBox[] checkboxes = new JCheckBox[items.length];
        JTextField[] quantityFields = new JTextField[items.length]; // Text fields for quantity
        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(items.length, 2));
        panel.setBackground(Color.LIGHT_GRAY);

        for (int i = 0; i < items.length; i++) {
            checkboxes[i] = new JCheckBox(items[i]);
            checkboxes[i].setFont(new Font("Arial", Font.PLAIN, 24));
            checkboxes[i].setBackground(Color.LIGHT_GRAY);
            checkboxes[i].setForeground(Color.BLACK);
            panel.add(checkboxes[i]);

            // Create a text field for quantity input, default is "1"
            quantityFields[i] = new JTextField("1", 3);
            quantityFields[i].setFont(new Font("Arial", Font.PLAIN, 24));
            panel.add(quantityFields[i]);
        }

        // Show the panel in a dialog
        int result = JOptionPane.showConfirmDialog(this, panel, "Select Items and Quantities", JOptionPane.OK_CANCEL_OPTION);

        if (result == JOptionPane.OK_OPTION) {
            // Calculate total cost and prepare order summary
            for (int i = 0; i < items.length; i++) {
                if (checkboxes[i].isSelected()) {
                    try {
                        int quantity = Integer.parseInt(quantityFields[i].getText());
                        int itemTotal = prices[i] * quantity;
                        orderSummary.append(items[i]).append(" x ").append(quantity).append(" = ₹").append(itemTotal).append("\n");
                        total += itemTotal;
                    } catch (NumberFormatException ex) {
                        JOptionPane.showMessageDialog(this, "Please enter a valid quantity for " + items[i], "Invalid Quantity", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
            }

            // Include the total in the order summary
            orderSummary.append("\nTotal: ₹").append(total);

            // Display order summary
            JTextArea textArea = new JTextArea(orderSummary.toString());
            textArea.setFont(new Font("Arial", Font.PLAIN, 28));
            textArea.setEditable(false);
            textArea.setLineWrap(true);
            textArea.setWrapStyleWord(true);
            textArea.setBackground(Color.LIGHT_GRAY);
            textArea.setPreferredSize(new Dimension(400, 200));

            JOptionPane.showMessageDialog(this, new JScrollPane(textArea), "Order Summary", JOptionPane.INFORMATION_MESSAGE);

            // Thank you message
            JTextArea thankYouArea = new JTextArea("Thank you! Visit again.");
            thankYouArea.setFont(new Font("Arial", Font.BOLD, 32));
            thankYouArea.setEditable(false);
            thankYouArea.setBackground(Color.LIGHT_GRAY);
            thankYouArea.setPreferredSize(new Dimension(500, 100));

            JOptionPane.showMessageDialog(this, new JScrollPane(thankYouArea), "Thank You!", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    public static void main(String[] args) {
        new RestaurantManagementSystem(); // Start the application
    }
}
